struct Node{
    Node* parent;
    int x;
    int y;
    char num;
    
};

class Solution {
private: 
set<char> getRemainingNumbers(vector<vector<char>>& board, int x, int y) {
    set<char> numbers = {'1', '2', '3', '4', '5', '6', '7', '8', '9'};
    for (int i = 0; i < 9; i++){
        if(board[x][i] != '.') {
            numbers.erase(board[x][i]);
        }
        if(board[i][y] != '.'){
            numbers.erase(board[i][y]);
        }
    }

    int gridStartX = floor(x/3)*3;
    int gridStartY = floor(y/3)*3;
    for (int i = gridStartX; i < gridStartX+3; i++){
        for (int j = gridStartY; j < gridStartY+3; j++){
            if(board[i][j] == '.') continue;
            numbers.erase(board[i][j]);
        }
    }

    return numbers;
}
stack<pair<int, int>> getBlankSpacesCoordenates(vector<vector<char>>& board){
    stack<pair<int, int>> blankSpacesCoordenates;
    for (int i = 0; i < 9; i++){
        for (int j = 0; j < 9; j++){
            if(board[i][j] == '.'){
                blankSpacesCoordenates.push(make_pair(i, j));
            }
        }
    }
    
    return blankSpacesCoordenates;
}
void printSudoku(vector<vector<char>>& board){
    for (int x = 0; x < 9; x++){
        for(int y = 0; y < 9; y++){
            cout << board[x][y] << " ";
            if ((y+1)%3 == 0) cout << "  ";
            if ((y+1)%9 == 0) cout << endl;
        }
        if ((x+1)%3 == 0) cout << endl;
    }
}

public:
    void solveSudoku(vector<vector<char>>& board) {
        stack<pair<int, int>> blankSpaces = getBlankSpacesCoordenates(board);
        
        stack<Node*> nodeStack;
        Node headState = {nullptr, -1, -1, '.'};
        nodeStack.push(&headState);

        while (!nodeStack.empty()){
            Node* currentNode = nodeStack.top();
            nodeStack.pop();
            if (currentNode != &headState){
                board[currentNode->x][currentNode->y] = currentNode->num;
            }
            if(blankSpaces.empty()) break;
            pair<int, int> blankSpace = blankSpaces.top();
            blankSpaces.pop();  

            set<char> remainingNumbers = getRemainingNumbers(board, blankSpace.first, blankSpace.second);
            if (remainingNumbers.empty()) {
                blankSpaces.push(blankSpace);

                Node* nextNode = nodeStack.top();
                while(currentNode->parent != nextNode->parent){
                    blankSpaces.push(make_pair(currentNode->x, currentNode->y));
                    board[currentNode->x][currentNode->y] = '.';
                    Node* previousNode = currentNode;
                    currentNode = currentNode->parent;
                    delete previousNode; 
                }
            }

            for (char num : remainingNumbers){
                nodeStack.push(new Node{currentNode, blankSpace.first, blankSpace.second, num });
            }        

        }
    }
};